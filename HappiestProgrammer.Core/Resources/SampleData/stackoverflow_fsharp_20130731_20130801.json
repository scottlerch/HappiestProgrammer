[{"DataSource":"stackoverflow.com","CommentId":"26327729","Text":"You want to cancel the current evaluation (right click on the FSI pane). No need to reset the whole of FSI, much less reboot VS!","Language":"f#"},{"DataSource":"stackoverflow.com","CommentId":"26304336","Text":"The CsvProvider is actually in the <code>FSharp.Data</code> namespace. <code>FSharp.Data.Csv</code> contains the non-type provider pieces like the parser, etc...","Language":"f#"},{"DataSource":"stackoverflow.com","CommentId":"26296152","Text":"It also doesn&#39;t list: Windows XP, Windows Server 2003, Windows Vista, Linuxes and OSXes (via Mono), mobile devices (via WP7/8&#39;s .Net framework, or via Mono for Android/iOS).","Language":"f#"},{"DataSource":"stackoverflow.com","CommentId":"26292459","Text":"Yes, this is correct; I made a typo. Changing","Language":"f#"},{"DataSource":"stackoverflow.com","CommentId":"26292380","Text":"Am I missing something or did you type too fast and should you instead be defining <code>let piped x =</code> as <code>f1 x |&gt; f2</code> (or <code>x |&gt; f1 |&gt; f2</code>) ? (Or did you mean that they are equivalent to the OPs cited inverse orderings?)","Language":"f#"},{"DataSource":"stackoverflow.com","CommentId":"26290670","Text":"Of course; my pleasure!","Language":"f#"},{"DataSource":"stackoverflow.com","CommentId":"26290635","Text":"The question you referenced is what I was looking for (I guess I did not look hard enough before posting), to be specific: <code>Which reads as: given two functions, f and g, and a value, x, compute the result of f of x and pass that result to g. The interesting thing here is that you can curry the (&gt;&gt;) function and only pass in parameters f and g, the result is a function which takes a single parameter and produces the result g ( f ( x ) ).</code> Thank you for your help!","Language":"f#"},{"DataSource":"stackoverflow.com","CommentId":"26290500","Text":"Hmm... Not sure you can really put this type of function into sentence form the same way you can&#39;t do that with math sometimes. I suppose one way to describe it is that it allows you to rearrange the order functions appear in your code for better readability.","Language":"f#"},{"DataSource":"stackoverflow.com","CommentId":"26290399","Text":"But why? May seem like a strange question, but how would you put that code into sentence form?","Language":"f#"},{"DataSource":"stackoverflow.com","CommentId":"26290328","Text":"Not quite! The correct definition would be g(f x)","Language":"f#"},{"DataSource":"stackoverflow.com","CommentId":"26290234","Text":"Before viewing the source, I would have imagined the <code>&gt;&gt;</code> operator to read like this: <code>let inline (&gt;&gt;) f g x = x(f g)</code>","Language":"f#"},{"DataSource":"stackoverflow.com","CommentId":"26277337","Text":"Thanks so much! Now it all makes sense!","Language":"f#"},{"DataSource":"stackoverflow.com","CommentId":"26276752","Text":"I provided instructions and code for using both the FShaprx and Solid version of the <code>Vector&lt;&#39;T&gt;</code> as an answer to my own question. Hope this helps. <a href=\"http://stackoverflow.com/a/17974392/818645\">stackoverflow.com/a/17974392/818645</a>","Language":"f#"},{"DataSource":"stackoverflow.com","CommentId":"26273871","Text":"I have already tried that, the Visual Studio does not recognize it if I add FSharp.Data as a reference . So I used the Nuget load the packages. But I don&#39;t want to use Nuget to reference it all the time. Is there any other way to include references from another project? Where do the F# libraries exist if I had to write a reference?","Language":"f#"},{"DataSource":"stackoverflow.com","CommentId":"26273642","Text":"You&#39;re missing <code>open FSharp.Data</code>","Language":"f#"},{"DataSource":"stackoverflow.com","CommentId":"26259333","Text":"Great. Thanks for clearing that up!","Language":"f#"},{"DataSource":"stackoverflow.com","CommentId":"26258779","Text":"You could just do <code>&#91;(1,2.0,&quot;f&quot;);(2,3.0,&quot;f&quot;)&#93; |&gt; Vector.ofSeq</code> but you need some collection type to pass to <code>ofSeq</code>","Language":"f#"},{"DataSource":"stackoverflow.com","CommentId":"26258685","Text":"Thanks. is there anyway to do this without using an intermediate tuple structure? I.e. do I need to create a list of tuples first, or is there a more direct way?","Language":"f#"},{"DataSource":"stackoverflow.com","CommentId":"26258285","Text":"The <code>use</code> binding is declared on one line but remains in scope until the end of the containing block, in your case the <code>processRequest</code> function or in this answer&#39;s case the <code>do</code> block. You can also use parentheses and <code>using</code> instead to reduce the scope.","Language":"f#"},{"DataSource":"stackoverflow.com","CommentId":"26258259","Text":"2 comments: Firstly, this is trivial to test.  Secondly, you can always compile the library yourself as F# is open source.","Language":"f#"},{"DataSource":"stackoverflow.com","CommentId":"26257440","Text":"Unless I&#39;m missing something, F# is just .Net code so once you have it compiled it will run on any computer containing &gt;= the version of .Net the code is compiled under.","Language":"f#"},{"DataSource":"stackoverflow.com","CommentId":"26253914","Text":"Awesome thank you! Just to be clear are you talking about the dispose that occurs when the using block is consumed? Or on response.Close()? I&#39;m used to using blocks being scoped using {} in C# so the idea of a being able to define one on a single line is confusing to me. How come I was able to get the requestString from the InputStream without needing to scope it in the same way as you&#39;ve shown?","Language":"f#"}]