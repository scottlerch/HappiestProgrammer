[{"DataSource":"stackoverflow.com","CommentId":"26360133","Text":"Thanks for asking this question. I was looking at the Slick documentation and I was baffled by what &quot;lifting&quot; meant.","Language":"scala"},{"DataSource":"stackoverflow.com","CommentId":"26339992","Text":"Nope. Level indeed hides the entries, but apparently cannot be applied to LocGroups.","Language":"scala"},{"DataSource":"stackoverflow.com","CommentId":"26332021","Text":"I finally used a Regex to replace all &#39; not preceded by a \\ with a &quot; -- after having replaced all &quot; with \\&quot;. Then I replaced all \\&#39; with &#39;.\n\nNot pretty, but worked. The original question stands to be answered, though.","Language":"scala"},{"DataSource":"stackoverflow.com","CommentId":"26301296","Text":"The part that I&#39;ve written will definitely compile ;) but the part that I&#39;ve left out won&#39;t, unless you do a cast to <code>ActorRef</code>. I&#39;m sorry I haven&#39;t made it clear (didn&#39;t have time to clarify). It should be obvious though, that type casts exist specifically for the reason of telling the type system that you don&#39;t care about correctness ;)","Language":"scala"},{"DataSource":"stackoverflow.com","CommentId":"26299869","Text":"@Jatin see the SLS quote by @gourlaysama, then see <code>op</code> in 1.1.","Language":"scala"},{"DataSource":"stackoverflow.com","CommentId":"26299667","Text":"@AdamMackler PiS index under <code>+=</code> reassignment with immutable sets and vars. Points to <a href=\"http://www.artima.com/pins1ed/next-steps-in-scala.html#step10\" rel=\"nofollow\">artima.com/pins1ed/next-steps-in-scala.html#step10</a> where you not only learn what += means, but that in Scala you &quot;mix in&quot; traits. So much to absorb!","Language":"scala"},{"DataSource":"stackoverflow.com","CommentId":"26298541","Text":"But say if I make my own class with <code>+</code> method and try the above. It works. But instead of <code>+</code> if I try say other name of method say <code>add</code>, then it doesnt work. <code>class A(val n:Int){\n def add(o:A) = new A(n+o.n)\n }</code> and try doing <code>var i = new A(1); i add= new A(2)</code>. This doesnt work. Replacing <code>add</code> with <code>+</code> works as expected. Interesting, is there any thing specified in documentation","Language":"scala"},{"DataSource":"stackoverflow.com","CommentId":"26297527","Text":"This is called <a href=\"http://www.artima.com/pins1ed/case-classes-and-pattern-matching.html#sec%3avar-binding\" rel=\"nofollow\">variable binding</a>.","Language":"scala"},{"DataSource":"stackoverflow.com","CommentId":"26297490","Text":"possible duplicate of <a href=\"http://stackoverflow.com/questions/13205726/does-scala-have-a-statement-equivalent-to-mls-as-statement\">Does Scala have a statement equivalent to ML&#39;s &quot;as&quot; statement?</a>","Language":"scala"},{"DataSource":"stackoverflow.com","CommentId":"26296127","Text":"@seand - for the purpose of the underscore, see my answer to <a href=\"http://stackoverflow.com/questions/17873870/convert-unit-to-unit/17874244#17874244\">this question</a>. Essentially, it tells the compiler to pass the function in as the parameter, not the result of evaluating it.","Language":"scala"},{"DataSource":"stackoverflow.com","CommentId":"26295976","Text":"Thanks for clarifying the &#39;pass by name&#39; convention.  One other question:  what&#39;s the purpose of the underscore in my2ndMethod(my2ndFn _) ?","Language":"scala"},{"DataSource":"stackoverflow.com","CommentId":"26293213","Text":"My suspicions is that this has something to do with some underlying thread pool not having enough threads or something.  Any ideas on a simple way to check this?  I tried putting blocking { ... } around the submitJob call to spawn an extra thread somehow, but that didn&#39;t work (no surprise...since it doesn&#39;t actually block).","Language":"scala"},{"DataSource":"stackoverflow.com","CommentId":"26293193","Text":"Sorry I meant a thread dump. If you download a tool like <a href=\"http://visualvm.java.net/\" rel=\"nofollow\">visualvm.java.net</a> or create a thread dump by sending SIGQUIT to the process or CTRL-BREAK in Windows, then you can see the stack calls of all your threads in the JVM. It is helpful for finding the root cause.","Language":"scala"},{"DataSource":"stackoverflow.com","CommentId":"26293104","Text":"I&#39;m not sure I understand what you mean. There is no stack trace here because there is no exception. If I wanted to try and dump the stack (without an exception), I&#39;m not sure how I would do that or where?","Language":"scala"},{"DataSource":"stackoverflow.com","CommentId":"26292897","Text":"Is the deployment machine under your control? Are you able to get stack dump from both machines and compare?","Language":"scala"},{"DataSource":"stackoverflow.com","CommentId":"26291702","Text":"@MariusKavansky, I doubt the first solution will compile because you won&#39;t be able to do this any more: <code>idList.foreach(x =&gt; x ! Msg)</code> because it will no longer know that <code>x</code> is an <code>ActorRef</code>.  All the more reason to go with solution 2.","Language":"scala"},{"DataSource":"stackoverflow.com","CommentId":"26291086","Text":"Well, if you can make it lazy, that should do it.  Otherwise, you might have to do the operation in several passes so you don&#39;t accumulate too much data in memory (it looks to me like you have all product IDs for all keys in memory at the same time).  Can&#39;t help with the details, though--just the strategy.","Language":"scala"},{"DataSource":"stackoverflow.com","CommentId":"26289411","Text":"I don&#39;t have a exact number it varies because some key words only return 1 or 2 items but some may return 100000","Language":"scala"},{"DataSource":"stackoverflow.com","CommentId":"26288021","Text":"Just how many product IDs are there per key?","Language":"scala"},{"DataSource":"stackoverflow.com","CommentId":"26287424","Text":"the first choice won&#39;t compile, will it?","Language":"scala"},{"DataSource":"stackoverflow.com","CommentId":"26287345","Text":"That&#39;s a good one.  Nothing about this in the index of &quot;Programming in Scala&quot; under <code>=</code> (nor, for that matter, &quot;assignment&quot; nor &quot;reassignment&quot;).  Thank you!","Language":"scala"},{"DataSource":"stackoverflow.com","CommentId":"26281323","Text":"Perhaps you could change your question to match your answer?","Language":"scala"},{"DataSource":"stackoverflow.com","CommentId":"26278804","Text":"Ah, right. There&#39;s no need to typecheck twice—the one outside the match will do. I&#39;ve edited the answer, thanks.","Language":"scala"},{"DataSource":"stackoverflow.com","CommentId":"26276794","Text":"I feel like an idiot right now. Thanks that was it, I&#39;ve been changing lots of settings and forgot about this one change. Another pair of eyes always helps :)","Language":"scala"},{"DataSource":"stackoverflow.com","CommentId":"26276446","Text":"Thank you, Travis, your answer really helped. One more question, though. Could you give an example when one would need to c.typeCheck(factory).tpe.baseClasses.contains(factorySym). Asking because I&#39;ve got factory.tpe.baseClasses.contains(factorySym) working fine.","Language":"scala"},{"DataSource":"stackoverflow.com","CommentId":"26276037","Text":"Thanks a lot, I&#39;ll test it, and if it works fine, I&#39;ll accept your answer","Language":"scala"},{"DataSource":"stackoverflow.com","CommentId":"26275941","Text":"I probably wanted to say that type macros are just very unlikely to make it in any Scala version (and definitely not in 2.11), but wasn&#39;t careful enough with words. Sorry for the confusion. There are two reasons for that: a) their type expansion feature doesn&#39;t pull its weight as per <a href=\"https://groups.google.com/d/topic/scala-internals/91W0-PxMQ9Q/discussion\" rel=\"nofollow\">groups.google.com/d/topic/scala-internals/91W0-PxMQ9Q/&hellip;</a>, b) their code generation feature is hands down beaten by macro annotations. However this doesn&#39;t mean that macros will never be able to generate new types (take, for example, macro annotations that are tentatively scheduled for 2.12).","Language":"scala"},{"DataSource":"stackoverflow.com","CommentId":"26275120","Text":"@user1189332 unfortunately, in Scala, methods and functions are different beasts: <a href=\"http://jim-mcbeath.blogspot.ro/2009/05/scala-functions-vs-methods.html\" rel=\"nofollow\">jim-mcbeath.blogspot.ro/2009/05/scala-functions-vs-methods.html</a>. See also this gist for a simple difference: <a href=\"https://gist.github.com/igstan/4d53408360cc826bd177\" rel=\"nofollow\">gist.github.com/igstan/4d53408360cc826bd177</a>","Language":"scala"},{"DataSource":"stackoverflow.com","CommentId":"26274859","Text":"if they both achieve the same effect, what is the advantage of one over the other?","Language":"scala"},{"DataSource":"stackoverflow.com","CommentId":"26274650","Text":"Ah, sorry, I understood you incorrectly. I added another possible solution.","Language":"scala"},{"DataSource":"stackoverflow.com","CommentId":"26274545","Text":"@IonuțG.Stan yep, sorry <a href=\"https://en.wikipedia.org/wiki/Haskell_Curry\" rel=\"nofollow\">mr. Curry</a> :-(","Language":"scala"},{"DataSource":"stackoverflow.com","CommentId":"26274509","Text":"@om-nom-nom it&#39;s called &quot;currying&quot;, not &quot;carrying&quot;. <a href=\"http://stackoverflow.com/questions/36314/what-is-currying\">stackoverflow.com/questions/36314/what-is-currying</a>","Language":"scala"},{"DataSource":"stackoverflow.com","CommentId":"26271241","Text":"If you&#39;re willing to settle for a structural type this is pretty easy—see for example my question <a href=\"http://stackoverflow.com/q/14370842/334519\">here</a> and blog posts <a href=\"http://meta.plasm.us/posts/2013/06/19/macro-supported-dsls-for-schema-bindings/\" rel=\"nofollow\">here</a> and <a href=\"http://meta.plasm.us/posts/2013/07/11/fake-type-providers-part-2/\" rel=\"nofollow\">here</a>. You could even use <a href=\"http://meta.plasm.us/posts/2013/07/12/vampire-methods-for-structural-types/\" rel=\"nofollow\">vampire methods</a> to avoid the reflective access hit that normally comes with structural types.","Language":"scala"},{"DataSource":"stackoverflow.com","CommentId":"26271209","Text":"Cheers Ionuț - wasn&#39;t clear on whether it was possible - I saw you could create anonymous inner classes but I guess that won&#39;t suffice.","Language":"scala"},{"DataSource":"stackoverflow.com","CommentId":"26270893","Text":"This solved my problem. I am only using long&#39;s at the mo, but may go upto bigdecimal, thanks ;)","Language":"scala"},{"DataSource":"stackoverflow.com","CommentId":"26270788","Text":"You can&#39;t create new types using macros (it&#39;s possible with type macros, which are in paradise, but type macros aren&#39;t going to be included in any Scala version according to a conversation I had with Eugene Burmako on IRC). This question might help though: <a href=\"http://stackoverflow.com/questions/17326661/scala-macro-define-top-level-object\" title=\"scala macro define top level object\">stackoverflow.com/questions/17326661/&hellip;</a>","Language":"scala"},{"DataSource":"stackoverflow.com","CommentId":"26270738","Text":"Scala version is 2.10.2","Language":"scala"},{"DataSource":"stackoverflow.com","CommentId":"26268619","Text":"this should also work: <code>fun(println,println)</code>. It&#39;s the same as <code>fun(println(_),println(_))</code>, which is just syntactic sugar for <code>fun(x =&gt; println(x),y =&gt; println(y))</code>","Language":"scala"},{"DataSource":"stackoverflow.com","CommentId":"26268586","Text":"OK Thanks Robin, that seems to have been an issue. Now I am getting an error that &quot;found cps expression in non-cps position&quot; however.","Language":"scala"},{"DataSource":"stackoverflow.com","CommentId":"26267408","Text":"I suspect you have a different version of scala-arm on your runtime CLASSPATH.","Language":"scala"},{"DataSource":"stackoverflow.com","CommentId":"26266858","Text":"@BenJames True indeed. To my defence: oxbow_lakes&#39; answer wasn&#39;t there yet when I started to write mine.","Language":"scala"},{"DataSource":"stackoverflow.com","CommentId":"26266548","Text":"But in the first i do not want a group but the main Sitemap. Or have I misunderstood you?","Language":"scala"},{"DataSource":"stackoverflow.com","CommentId":"26266208","Text":"thank you @om-nom-nom ... I got it now","Language":"scala"},{"DataSource":"stackoverflow.com","CommentId":"26266076","Text":"for example: <code>fun({x =&gt; println(x)}, {y =&gt; println(y)})</code>","Language":"scala"},{"DataSource":"stackoverflow.com","CommentId":"26263794","Text":"Thanks Ben, hcoopz. I&#39;ve modified answer","Language":"scala"},{"DataSource":"stackoverflow.com","CommentId":"26263459","Text":"Ah, I see the problem. Sorry, I don’t know if there is a built-in method which may help you with this but you can of course easily write your own tail-recursive <code>rangeFoldLeft</code> function if you need to use a larger range.","Language":"scala"},{"DataSource":"stackoverflow.com","CommentId":"26262871","Text":"Yeah, was really hoping there was a way to use say a long or ulong with a step size of 2 :( but thanks for the answers :)","Language":"scala"},{"DataSource":"stackoverflow.com","CommentId":"26262763","Text":"maybe you need to pass it as setActiveProfiles(profiles:_*)","Language":"scala"},{"DataSource":"stackoverflow.com","CommentId":"26262526","Text":"^ Yea was just about to say this: this doesn&#39;t work without the <code>by</code> clause, for example <code>BigInt(1) to BigInt(&quot;100000000000&quot;)</code> throws an exception. So you&#39;re still limited to Int.MaxValue iterations.","Language":"scala"},{"DataSource":"stackoverflow.com","CommentId":"26262492","Text":"This works fine in giving my the same iterations as before: (BigDecimal(&quot;1&quot;) to BigDecimal(&quot;999999999&quot;) by BigDecimal(&quot;2&quot;)), where a step size of 2 is what i&#39;m after, but if i put just one more 9 in there it will give this error: \n\njava.lang.IllegalArgumentException: 1 to 9999999999 by 2: seqs cannot contain more than Int.MaxValue elements.","Language":"scala"},{"DataSource":"stackoverflow.com","CommentId":"26261172","Text":"<code>by</code> specifies the step size.","Language":"scala"},{"DataSource":"stackoverflow.com","CommentId":"26261137","Text":"Can you explain what this part is doing: &#39;by BigInt(&quot;2000000000&quot;)&#39; ? thanks","Language":"scala"},{"DataSource":"stackoverflow.com","CommentId":"26261020","Text":"Delving further into <b>scalaz</b>, <i>lifting</i> also comes up in relation to <i>monad transformers</i>. If I have a <code>MonadTrans</code> instance <code>T</code> for <code>M</code> and a <code>Monad</code> instance for <code>N</code>, then <code>T.liftM</code> can be used to <i>lift</i> a value of type <code>N&#91;A&#93;</code> to a value of type <code>M&#91;N, A&#93;</code>.","Language":"scala"},{"DataSource":"stackoverflow.com","CommentId":"26260263","Text":"It might be worth mentioning that &quot;lifting a method to a function&quot; is often referred to as <i>eta-expansion</i>.","Language":"scala"},{"DataSource":"stackoverflow.com","CommentId":"26260243","Text":"This is the &quot;lifting into a functor&quot; which oxbow_lakes describes.","Language":"scala"},{"DataSource":"stackoverflow.com","CommentId":"26257821","Text":"@Jatin No, because parameter type is Vararg","Language":"scala"},{"DataSource":"stackoverflow.com","CommentId":"26257457","Text":"You dont have to do anything. If you have a java function and it expects a <code>String&#91;&#93;</code> then scala compiler will itself convert <code>Array&#91;String&#93;</code> to <code>String&#91;&#93;</code>. Please show the error","Language":"scala"},{"DataSource":"stackoverflow.com","CommentId":"26257335","Text":"I think my answer is <code>setActiveProfiles(array:_*)</code>","Language":"scala"},{"DataSource":"stackoverflow.com","CommentId":"26257192","Text":"No, I want to call the Java method with vararg parameter in Scala","Language":"scala"},{"DataSource":"stackoverflow.com","CommentId":"26257091","Text":"Can you display the error. Are you trying to send Java array to scala function?","Language":"scala"},{"DataSource":"stackoverflow.com","CommentId":"26254194","Text":"There will be at most 2 <code>in.reverse</code> in your examples, and 1 with <code>dequeue</code>. It&#39;s not a significant performance difference.","Language":"scala"},{"DataSource":"stackoverflow.com","CommentId":"26254147","Text":"You are correct, it&#39;s <code>O(1)</code>. I can see the only option: your benchmark is not correct.","Language":"scala"},{"DataSource":"stackoverflow.com","CommentId":"26254121","Text":"Have a look at this other question/answer and see if yours is a duplicate: <a href=\"http://stackoverflow.com/questions/13653873/need-plain-english-translation-of-the-following-scala-snippet/13656978#13656978\" title=\"need plain english translation of the following scala snippet\">stackoverflow.com/questions/13653873/&hellip;</a>. I went to some length to explain a similar example.","Language":"scala"},{"DataSource":"stackoverflow.com","CommentId":"26254002","Text":"@senia, I don&#39;t think <code>head</code> and <code>tail</code> are O(n). See <a href=\"https://github.com/scala/scala/blob/v2.10.2/src/library/scala/collection/immutable/Queue.scala#L81\" rel=\"nofollow\">github.com/scala/scala/blob/v2.10.2/src/library/scala/&hellip;</a>. It really leverages structural sharing and it seems O(1) to me. Sorry I take the O(1) back, there is a <code>in.reverse</code> in there. But that is also true of <code>dequeue</code>.","Language":"scala"},{"DataSource":"stackoverflow.com","CommentId":"26253978","Text":"<a href=\"http://pastebin.com/9wkc0BLu\" rel=\"nofollow\">pastebin</a>. I guess it&#39;s an improvement in versions &gt; <code>2.10.0</code>.","Language":"scala"},{"DataSource":"stackoverflow.com","CommentId":"26253948","Text":"@senia, I see what you mean, I do see <code>o9.get.apply(0)</code> with a more recent version and no <code>drop</code>.","Language":"scala"},{"DataSource":"stackoverflow.com","CommentId":"26253894","Text":"@senia, 2.10.0. Are you checking the <i>immutable</i> queue?","Language":"scala"},{"DataSource":"stackoverflow.com","CommentId":"26253821","Text":"What is your compiler version?","Language":"scala"},{"DataSource":"stackoverflow.com","CommentId":"26253809","Text":"What is your compiler version? I&#39;m using <code>2.10.1</code> and <code>2.11.0-M3</code> and there is no <code>p3</code>.","Language":"scala"},{"DataSource":"stackoverflow.com","CommentId":"26253723","Text":"@kelloti: are you sure performance is not the same in both examples? Your code could be optimized as useless by jit. As I can see from <code>scalac -Xprint:patmat</code> there is no significant difference between your 2 code samples.","Language":"scala"},{"DataSource":"stackoverflow.com","CommentId":"26253267","Text":"@huynhjl, immutable","Language":"scala"},{"DataSource":"stackoverflow.com","CommentId":"26253255","Text":"Thanks! I&#39;ll try that too. But why the discrepancy in my examples?","Language":"scala"},{"DataSource":"stackoverflow.com","CommentId":"26253236","Text":"Is this the mutable <code>Queue</code> or the immutable one?","Language":"scala"},{"DataSource":"stackoverflow.com","CommentId":"26253050","Text":"<code>Queue</code> is actually constructed using 2 lists. But <code>List(a, b)</code> is also a pattern for list of 2 elements.","Language":"scala"},{"DataSource":"stackoverflow.com","CommentId":"26253011","Text":"@senia Oops, you&#39;re right - I was thinking Queue was constructed like List. Nevertheless, the deconstruction argument around why <code>_*</code> takes so long would still apply (but stick with using headOption or dequeue or similar for the method).","Language":"scala"},{"DataSource":"stackoverflow.com","CommentId":"26252875","Text":"<code>Queue((thing, stuff), _)</code> is a pattern for collection of <b>2</b> elements.","Language":"scala"}]